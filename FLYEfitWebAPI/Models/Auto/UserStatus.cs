/*
 * Flyefit API
 *
 * This is FLYEfit's API for access it's internal member database
 *
 * OpenAPI spec version: 0.4.0
 * Contact: api@flyefit.ie
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 1:Active;2:Disabled
    /// </summary>
    [DataContract]
    public partial class UserStatus :  IEquatable<UserStatus>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="UserStatus" /> class.
        /// </summary>
        /// <param name="StatusId">StatusId.</param>
        /// <param name="Status">Status.</param>
        public UserStatus(int? StatusId = default(int?), string Status = default(string))
        {
            this.StatusId = StatusId;
            this.Status = Status;
            
        }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [DataMember(Name="statusId")]
        public int? StatusId { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserStatus {\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((UserStatus)obj);
        }

        /// <summary>
        /// Returns true if UserStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of UserStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserStatus other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.StatusId == other.StatusId ||
                    this.StatusId != null &&
                    this.StatusId.Equals(other.StatusId)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.StatusId != null)
                    hash = hash * 59 + this.StatusId.GetHashCode();
                    if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(UserStatus left, UserStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserStatus left, UserStatus right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
