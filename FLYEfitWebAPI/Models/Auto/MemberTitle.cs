/*
 * Flyefit API
 *
 * This is FLYEfit's API for access it's internal member database
 *
 * OpenAPI spec version: 0.4.0
 * Contact: api@flyefit.ie
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 1:Mr;2:Mrs;3:Ms
    /// </summary>
    [DataContract]
    public partial class MemberTitle :  IEquatable<MemberTitle>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="MemberTitle" /> class.
        /// </summary>
        /// <param name="TitleId">TitleId.</param>
        /// <param name="Title">Title.</param>
        public MemberTitle(int? TitleId = default(int?), string Title = default(string))
        {
            this.TitleId = TitleId;
            this.Title = Title;
            
        }

        /// <summary>
        /// Gets or Sets TitleId
        /// </summary>
        [DataMember(Name="titleId")]
        public int? TitleId { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title")]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MemberTitle {\n");
            sb.Append("  TitleId: ").Append(TitleId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((MemberTitle)obj);
        }

        /// <summary>
        /// Returns true if MemberTitle instances are equal
        /// </summary>
        /// <param name="other">Instance of MemberTitle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MemberTitle other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.TitleId == other.TitleId ||
                    this.TitleId != null &&
                    this.TitleId.Equals(other.TitleId)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.TitleId != null)
                    hash = hash * 59 + this.TitleId.GetHashCode();
                    if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(MemberTitle left, MemberTitle right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MemberTitle left, MemberTitle right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
