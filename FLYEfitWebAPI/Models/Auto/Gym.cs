/*
 * Flyefit API
 *
 * This is FLYEfit's API for access it's internal member database
 *
 * OpenAPI spec version: 0.4.0
 * Contact: api@flyefit.ie
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Gym :  IEquatable<Gym>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Gym" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Status">1&#x3D;Active; 0&#x3D;Not Active [Coolock permanently closed].</param>
        /// <param name="PreSaleStatus">0&#x3D;Gym is open; 1&#x3D;Gym is advertised as opening soon and presale pricing applies.</param>
        /// <param name="OpenDate">OpenDate.</param>
        /// <param name="Latitude">Latitude.</param>
        /// <param name="Longitude">Longitude.</param>
        /// <param name="Photo">Photo.</param>
        public Gym(int? Id = default(int?), string Name = default(string), int? Status = default(int?), int? PreSaleStatus = default(int?), DateTime? OpenDate = default(DateTime?), double? Latitude = default(double?), double? Longitude = default(double?), string Photo = default(string))
        {
            this.Id = Id;
            this.Name = Name;
            this.Status = Status;
            this.PreSaleStatus = PreSaleStatus;
            this.OpenDate = OpenDate;
            this.Latitude = Latitude;
            this.Longitude = Longitude;
            this.Photo = Photo;
            
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }
        /// <summary>
        /// 1&#x3D;Active; 0&#x3D;Not Active [Coolock permanently closed]
        /// </summary>
        /// <value>1&#x3D;Active; 0&#x3D;Not Active [Coolock permanently closed]</value>
        [DataMember(Name="status")]
        public int? Status { get; set; }
        /// <summary>
        /// 0&#x3D;Gym is open; 1&#x3D;Gym is advertised as opening soon and presale pricing applies
        /// </summary>
        /// <value>0&#x3D;Gym is open; 1&#x3D;Gym is advertised as opening soon and presale pricing applies</value>
        [DataMember(Name="preSaleStatus")]
        public int? PreSaleStatus { get; set; }
        /// <summary>
        /// Gets or Sets OpenDate
        /// </summary>
        [DataMember(Name="openDate")]
        public DateTime? OpenDate { get; set; }
        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="latitude")]
        public double? Latitude { get; set; }
        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="longitude")]
        public double? Longitude { get; set; }
        /// <summary>
        /// Gets or Sets Photo
        /// </summary>
        [DataMember(Name="photo")]
        public string Photo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Gym {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PreSaleStatus: ").Append(PreSaleStatus).Append("\n");
            sb.Append("  OpenDate: ").Append(OpenDate).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Photo: ").Append(Photo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Gym)obj);
        }

        /// <summary>
        /// Returns true if Gym instances are equal
        /// </summary>
        /// <param name="other">Instance of Gym to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Gym other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.PreSaleStatus == other.PreSaleStatus ||
                    this.PreSaleStatus != null &&
                    this.PreSaleStatus.Equals(other.PreSaleStatus)
                ) && 
                (
                    this.OpenDate == other.OpenDate ||
                    this.OpenDate != null &&
                    this.OpenDate.Equals(other.OpenDate)
                ) && 
                (
                    this.Latitude == other.Latitude ||
                    this.Latitude != null &&
                    this.Latitude.Equals(other.Latitude)
                ) && 
                (
                    this.Longitude == other.Longitude ||
                    this.Longitude != null &&
                    this.Longitude.Equals(other.Longitude)
                ) && 
                (
                    this.Photo == other.Photo ||
                    this.Photo != null &&
                    this.Photo.Equals(other.Photo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                    if (this.PreSaleStatus != null)
                    hash = hash * 59 + this.PreSaleStatus.GetHashCode();
                    if (this.OpenDate != null)
                    hash = hash * 59 + this.OpenDate.GetHashCode();
                    if (this.Latitude != null)
                    hash = hash * 59 + this.Latitude.GetHashCode();
                    if (this.Longitude != null)
                    hash = hash * 59 + this.Longitude.GetHashCode();
                    if (this.Photo != null)
                    hash = hash * 59 + this.Photo.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Gym left, Gym right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Gym left, Gym right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
